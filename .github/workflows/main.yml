name: Facial Authentication API

on:
  push:
    branches:
    - master
    - develop
  pull_request:
    branches:
    - master
    - develop

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.8, 3.7]
      
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 mypy
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Run unit test
      env:
        CEDULA_API_KEY: ${{ secrets.CEDULA_API_KEY }}
        FACE_API_KEY: ${{ secrets.FACE_API_KEY }}
        FACE_API_ENDPOINT: ${{ secrets.FACE_API_ENDPOINT }}
      run: |
        python -m unittest discover -s ./tests/
    - name: Run typechecking with mypy
      run: |
        mypy --install-types --non-interactive src
  deploy:
    needs: ["build"]
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    
    steps:
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x
        
      - id: deploy
        uses: google-github-actions/deploy-cloudrun@main
        with:
          image: ${{ env.GAR_BASE}}/${{env.PROJECT_NAME}}/${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }}:${{ env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          service: ${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }}-${{ env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          credentials: ${{ secrets.GAR_JSON_KEY }}
          region: ${{ secrets.GCP_REGION }}
          env_vars: |
            NODE_ENV=${{ env.NODE_ENV }},
            REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL_DEV }}
        
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCP_PROJECT }}
          service_account_key: ${{ secrets.GAR_JSON_KEY }}
          export_default_credentials: true
      
      - name: Allow unauthenticated calls to the service
        run: |
          gcloud run services add-iam-policy-binding ${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }}-${{ env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }} \
          --region=${{ secrets.GCP_REGION }} --member=allUsers --role=roles/run.invoker --quiet
      
      - id: test
        run: curl "${{ steps.deploy.outputs.url }}"

      - name: Comment PR with DEV URL
        if: ${{ success() }}
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            **DEV URL:** 
            ${{ steps.deploy.outputs.url }}
          reactions: heart
